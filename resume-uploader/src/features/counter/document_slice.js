import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
  content: "",
  status: 'ready',
};

export const upload_async = createAsyncThunk(
  'upload/fetchUpload',
  async (file) => {
    const form_data = new FormData();
    form_data.append("file", file);
    console.log(form_data);
   
    let response; 
    try {
    response = await fetch("http://localhost:3001/documents", {
        method: "POST",
        body: form_data
    });
    console.log(response);
    } catch (error) {
        console.error(error);
    }
    const success = await response.json();
    // The value we return becomes the `fulfilled` action payload
    console.log(success);
    return success;
  }
);

export const document_slice = createSlice({
  name: 'document',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    confirm: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.content = action.payload;
      state.status = "Success";
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(upload_async.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(upload_async.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { confirm} = document_slice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const select_content = (state) => state.document.content;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};*/

export default document_slice.reducer;
